<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Groupe;
use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

    /**
     * @param $minDate string date format('Y-m-d H:i:s')
     * @param $maxDate string date format('Y-m-d H:i:s')
     * @return array
     */
    public function findByCreationDates($minDate = null, $maxDate = null){

        $qb = $this->createQueryBuilder('u');

        if ($minDate)
        {
            $qb
                ->where($qb->expr()->gt('u.registrationDate', ':minDate'))
                ->setParameter('minDate', $minDate);

        }

        if ($maxDate)
        {
            $qb
                ->andWhere($qb->expr()->lt('u.registrationDate', ':maxDate'))
                ->setParameter('maxDate', $maxDate);
        }

        $users = $qb
            ->getQuery()
            ->getResult();

        return $users;
    }

    /**
     * @throws \Exception
     */
    public function deleteMinors(){

        $minorLimit = new \DateTime('-18 year');
        dump($minorLimit);

        $qb = $this->createQueryBuilder('u');

        $users = $qb->select()
            ->where("u.birthdate >= :date")
            ->setParameter('date', $minorLimit)
            ->getQuery()
            ->getResult();

        $em = $this->getEntityManager();
        foreach ($users as $u) {
            $em->remove($u);
        }

        $em->flush();

//        $qb = $this->getEntityManager();
//        $qb
//            ->createQuery("DELETE FROM AppBundle:User u WHERE u.birthdate >= :date")
//            ->setParameter('date', $minorLimit)
//            ->getResult();

//        $qb = $this->getEntityManager()->createQueryBuilder();
//        $qb
//            ->delete('AppBundle:User', 'u')
//            ->where('u.birthdate >= :date')
//            ->setParameter('date', $minorLimit)
//            ->getQuery()
//            ->getResult();

        return true;
    }

    /**
     * Return un tableau de User appartenant au groupe de nom $groupName
     * @param $groupName
     * @return array
     */
    public function getUsersInGroup($groupName)
    {
        $qb = $this->getEntityManager();
        $users = $qb
            ->createQuery("SELECT u FROM AppBundle:User u JOIN u.groups ug WHERE ug.name = :groupName")
            ->setParameter('groupName', $groupName)->getResult();

        return $users;
    }

}
